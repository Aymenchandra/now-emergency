// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum userRole {
  ADMIN
  USER
  EMPLOYEE
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  userRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation twoFactorConfirmation?
  phone                 String?
  location              Location?              @relation
  emergenciesAsUser     Emergency[]            @relation("EmergencyUser")
  emergenciesAsEmployee Emergency[]            @relation("EmergencyEmployee")
}

model Location {
  id          String  @id @default(cuid())
  country     String
  governorate String
  position    Float[]
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String? @unique
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token]) //Only one unique token for specific email
}

// seperate model to keep token safe
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model twoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum emergencyType {
  VIOLENCE
  FIRE
  OTHER
}

enum emergencyStatus {
  HELP
  PENDING
  DONE
}

model Emergency {
  id          String          @id @default(cuid())
  title       String
  description String
  country     String
  governorate String
  display_name String?
  position    Float[]
  type        emergencyType   @default(OTHER)
  status      emergencyStatus @default(HELP)
  date        DateTime?       @default(now())

  userId String // This is the foreign key to the User model
  user   User   @relation("EmergencyUser", fields: [userId], references: [id], onDelete: Cascade)

  employeeId String? // This is the foreign key to the Employee from user model
  employee   User?   @relation("EmergencyEmployee", fields: [employeeId], references: [id], onDelete: Cascade)
}
